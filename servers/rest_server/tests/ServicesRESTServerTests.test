<?php


/**
 * Unit tests for RESTServer class.
 */
class ServicesRESTServerTests extends DrupalUnitTestCase {

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('RESTServer unit tests'),
      'description' => t('Test separate methods of class.'),
      'group' => t('Services'),
    );
  }

  public function setUp() {
    parent::setUp();

    module_load_include('inc', 'services', 'includes/services.runtime');
    module_load_include('inc', 'rest_server', 'includes/RESTServer');
    module_load_include('inc', 'rest_server', 'includes/ServicesContentTypeNegotiator');
    module_load_include('inc', 'rest_server', 'includes/ServicesContext');
    module_load_include('inc', 'rest_server', 'includes/ServicesParser');
    module_load_include('inc', 'rest_server', 'includes/ServicesRESTServerFactory');
    module_load_include('inc', 'rest_server', 'tests/rest_server_mock_classes');
  }

  /**
   * Test method getResourceName().
   */
  public function testGetResourceName() {
    $factory_args = $this->getDefaultFactoryArguments();

    $rest_server_factory = new MockServicesRESTServerFactory($factory_args);
    $rest_server = $rest_server_factory->getRESTServer();

    $resource_name = $rest_server->getResourceName();
    $this->assertEqual($resource_name, 'node', 'Retrieve call resource name determined properly.');


    $factory_args['context_data']['get']['q'] = 'rest/user';
    $rest_server_factory = new MockServicesRESTServerFactory($factory_args);
    $rest_server = $rest_server_factory->getRESTServer();

    $resource_name = $rest_server->getResourceName();
    $this->assertEqual($resource_name, 'user', 'Index call resource name determined properly.');
  }

  /**
   * Test method getResponseFormatter().
   */
  public function testGetResponseFormatter() {
    $factory_args = $this->getDefaultFactoryArguments();

    $rest_server_factory = new MockServicesRESTServerFactory($factory_args);
    $rest_server = $rest_server_factory->getRESTServer();

    $controller = array();
    $formatter = $rest_server->getResponseFormatter($controller);
    $this->assertEqual($formatter, $factory_args['formatters']['xml'], 'XML formatter determined properly from URL');

    // Pass formatter in url that is not recognizable.
    $factory_args['context_data']['get']['q'] = 'rest/node/1.php';
    $rest_server_factory = new MockServicesRESTServerFactory($factory_args);
    $rest_server = $rest_server_factory->getRESTServer();
    $formatter_not_found = TRUE;
    try {
      $formatter = $rest_server->getResponseFormatter($controller);
      $formatter_not_found = FALSE;
    }
    catch (Exception $e) {
    }
    $this->assertTrue($formatter_not_found, 'Unknown formatter not found.');
  }

  protected function getDefaultFactoryArguments() {
    $context_data = array(
      'get' => array('q' => 'rest/node/1.xml'),
      'server' => array(),
      'post' => array(),
      'request_body' => '',
    );

    $formatters = array(
      'xml' => array(
        'mime types' => array('application/xml', 'text/xml'),
        'view arguments' => array('format' => 'xml'),
      ),
      'json' => array(
        'mime types' => array('application/json'),
        'view arguments' => array('format' => 'json'),
      ),
    );

    $factory_args = array(
      'endpoint_path' => 'rest',
      'context_data' => $context_data,
      'formatters' => $formatters,
    );

    return $factory_args;
  }
}
