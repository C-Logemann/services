<?php

// $Id$

/**
 * @file
 * Call the endpoint tests when no authentication is being used.
 *
 */

require_once('ServicesWebTestCase.php') ;
/**
 * Run test cases for the endpoint with no authentication turned on.
 *
 */
 class ServicesEndpointTests extends ServicesWebTestCase {

	/**
    * Implementation of setUp().
    */
   public function setUp() {
     parent::setUp(
      'autoload',
     	'ctools',
     	'services',
      'rest_server',
      'services_sessauth'
     );
   }
   /**
    * Test adding an endpoint succeeds.
    */
   public function testEndpointForm() {
     $edit = $this->populateEndpointFAPI() ;
     $this->drupalPost('admin/build/services/add', $edit, t('Save and proceed'));
     $this->drupalGet($edit['path']);
   }
   public function testNewEndpointResourceNodeIndex() {
    $endpoint =  $this->saveNewEndpoint();
    $node = $this->drupalCreateNode();
    $responseArray = $this->servicesGet($endpoint->path.'/node');
    $nodeResourceIndex = json_decode($responseArray['body']);
    if($node->title == $nodeResourceIndex[0]->title) {
      $this->pass('Successfully received Node info', 'NodeResource: Index');
    } else {
      $this->fail('Something went wrong.', 'NodeResource: Index');
    }
   }
   public function testNewEndpointResourceNodeGet() {
    $endpoint =  $this->saveNewEndpoint();
    $node = $this->drupalCreateNode();
    $responseArray = $this->servicesGet($endpoint->path.'/node/'. $node->nid);
    $nodeResourceGet = json_decode($responseArray['body']);
    if($node->title == $nodeResourceGet->title) {
      $this->pass('Successfully received Node info', 'NodeResource: Retrieve');
    } else {
      $this->fail(t('Something went wrong. StatusCode: !status', array('!status' => $responseArray['status'])), 'NodeResource: Retrieve');
    }
    //Verify node not Found
    unset($node);
    $responseArray = $this->servicesGet($endpoint->path.'/node/99');
    if($responseArray['code'] == '404') {
      $this->pass('Successfully was rejected to non existent node', 'NodeResource: Retrieve');
    } else {
      $this->pass('I didnt get rejected, bad news!', 'NodeResource: Retrieve');
    }
    //@todo verify permmissions, ie user 1 cant get access to user 2 
   }
   /**
    * Test adding an endpoint succeeds.
    */
   public function testSuccessfulAddEndpoint() {
     $edit = $this->populateEndpointFAPI() ;

     $this->drupalPost('admin/build/services/add', $edit, t('Save and proceed')) ;
     $this->assertResponse('200', t('expected 200'));
     $this->drupalGet('admin/build/services/list') ;
     $this->assertResponse('200',t('expected 200'));

     $this->assertText($edit['title'], t('Endpoint path appears')) ;
     $this->assertText('rest_server', t('Server is rest server')) ;
     $this->assertText('In database', t('Storage is in database')) ;
   }

   /**
    * Test missing path to endpoint causes an error.
    */
   public function testMissingPath() {
     $edit = $this->populateEndpointFAPI() ;
     unset($edit['path']) ;

     $this->drupalPost('admin/build/services/add', $edit, t('Save and proceed')) ;
     $this->assertResponse('200', 'expected 200');

     $this->assertText('Path to endpoint field is required.',
       t('Endpoint path missing error message.')) ;
     $this->assertFieldByName('title', $edit['title'],
       t('Title field remains.')) ;
     $this->assertFieldByName('server', 'rest_server',
       t('Server is rest server')) ;
     $this->assertFieldChecked('edit-services-use-content-permissions',
       t('Storage use content permission is checked.')) ;
   }

   /**
    * Test missing title for endpoint causes an error.
    */
   public function testMissingTitle() {
     $edit = $this->populateEndpointFAPI() ;
     unset($edit['title']) ;

     $this->drupalPost('admin/build/services/add', $edit, t('Save and proceed')) ;
     $this->assertResponse('200', 'expected 200');

     $this->assertText('Endpoint title field is required.',
       t('Endpoint title missing error message.')) ;
     $this->assertFieldByName('name', $edit['name'],
       t('Name field remains.')) ;
     $this->assertFieldByName('server', 'rest_server',
       t('Server is rest server')) ;
     $this->assertFieldChecked('edit-services-use-content-permissions',
       t('Storage use content permission is checked.')) ;
   }

   /**
    * Test missing server for endpoint causes an error.
    */
   public function testMissingServer() {
     $edit = $this->populateEndpointFAPI() ;
     unset($edit['server']) ;

     $this->drupalPost('admin/build/services/add', $edit,
       t('Save and proceed')) ;
     $this->assertResponse('200', 'expected 200');

     $this->assertText('Server field is required.',
       t('Server missing error message.')) ;
     $this->assertFieldByName('name', $edit['name'],
       t('Name field remains.')) ;
     $this->assertFieldByName('title', $edit['title'],
       t('Title field remains.')) ;
     $this->assertFieldChecked('edit-services-use-content-permissions',
       t('Storage use content permission is checked.')) ;
   }

   /*
    ------------------------------------
    HELPER METHODS
    ------------------------------------
   */

   /**
    * Creates a data array for populating an endpoint creation form.
    *
    * @return
    * An array of fields for fully populating an endpoint creation form.
    */
   public function populateEndpointFAPI() {
     return array(
       'name'   => 'mchnname',
       'title'  => $this->randomName(20),
       'path'   => $this->randomName(10),
       'server' => 'rest_server',
       'services_use_content_permissions' => TRUE,
     ) ;
   }

   public function saveNewEndpoint() {
    $edit = $this->populateEndpointFAPI() ;
    $endpoint = new stdClass;
    $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
    $endpoint->api_version = 3;
    $endpoint->name = $edit['name'];
    $endpoint->title = $edit['title'];
    $endpoint->server = $edit['server'];
    $endpoint->path = $edit['path'];
    $endpoint->authentication = array(
      'services_sessauth' => array(),
    );
    $endpoint->resources = array(
      'node' => array(
        'alias' => '',
        'operations' => array(
          'create' => array(
            'enabled' => 1,
          ),
          'retrieve' => array(
            'enabled' => 1,
          ),
          'update' => array(
            'enabled' => 1,
          ),
          'delete' => array(
            'enabled' => 1,
          ),
          'index' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'system' => array(
        'alias' => '',
        'actions' => array(
          'connect' => array(
            'enabled' => 1,
          ),
          'get_variable' => array(
            'enabled' => 1,
          ),
          'set_variable' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'taxonomy_term' => array(
        'alias' => '',
        'operations' => array(
          'create' => array(
            'enabled' => 1,
          ),
          'retrieve' => array(
            'enabled' => 1,
          ),
          'update' => array(
            'enabled' => 1,
          ),
          'delete' => array(
            'enabled' => 1,
          ),
        ),
        'actions' => array(
          'selectNodes' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'taxonomy_vocabulary' => array(
        'alias' => '',
        'operations' => array(
          'create' => array(
            'enabled' => 1,
          ),
          'retrieve' => array(
            'enabled' => 1,
          ),
          'update' => array(
            'enabled' => 1,
          ),
          'delete' => array(
            'enabled' => 1,
          ),
        ),
        'actions' => array(
          'getTree' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'user' => array(
        'alias' => '',
        'operations' => array(
          'create' => array(
            'enabled' => 1,
          ),
          'retrieve' => array(
            'enabled' => 1,
          ),
          'update' => array(
            'enabled' => 1,
          ),
          'delete' => array(
            'enabled' => 1,
          ),
          'index' => array(
            'enabled' => 1,
          ),
        ),
        'actions' => array(
          'login' => array(
            'enabled' => 1,
          ),
          'logout' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'comment' => array(
        'alias' => '',
        'operations' => array(
          'create' => array(
            'enabled' => 1,
          ),
          'retrieve' => array(
            'enabled' => 1,
          ),
          'update' => array(
            'enabled' => 1,
          ),
          'delete' => array(
            'enabled' => 1,
          ),
        ),
        'actions' => array(
          'loadNodeComments' => array(
            'enabled' => 1,
          ),
          'countAll' => array(
            'enabled' => 1,
          ),
          'countNew' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'file' => array(
        'alias' => '',
        'operations' => array(
          'create' => array(
            'enabled' => 1,
          ),
          'retrieve' => array(
            'enabled' => 1,
          ),
          'delete' => array(
            'enabled' => 1,
          ),
        ),
        'actions' => array(
          'nodeFiles' => array(
            'enabled' => 1,
          ),
        ),
      ),
      'echo' => array(
        'alias' => '',
        'operations' => array(
          'index' => array(
            'enabled' => 1,
          ),
        ),
      ),
    );
    $endpoint->debug = 1;
    $endpoint->status = 1;
    services_endpoint_save($endpoint);
    $endpoint = services_endpoint_load($endpoint->name);
    if($endpoint->name == $edit['name']) {
      $this->pass('Endpoint successfully created');  
    } else {
       $this->fail('Endpoint creation failed');  
    }
     $this->servicesGet($edit['path']);
     return $endpoint;
   }
}